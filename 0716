@AllArgsConstructor
public class 決済手段照会ViewModelFactory {

	public static 決済手段照会ViewModel createViewModel(決済手段照会Dto 決済手段dto) {

		決済手段番号Vo 決済手段番号 = 決済手段dto.決済手段番号();
		決済手段名Vo 決済手段名 = 決済手段dto.決済手段名();

		Date 請求_適用開始日 = null;
		Date 請求_適用終了日 = null;
		決済方法Code 請求_決済方法 = null;
		決済サービスCode 請求_決済代行サービス = null;
		決済アクセスキーVo 請求_決済アクセスキー = null;

		金融機関コードVo 請求_口座_金融機関コード = null;
		金融機関支店コードVo 請求_口座_金融機関支店コード = null;
		口座種別Code 請求_口座_口座種別 = null;
		口座番号Vo 請求_口座_口座番号 = null;
		口座名義Vo 請求_口座_口座名義 = null;

		クレジットカードブランドCode 請求_クレジットカードブランド = null;
		クレジットカード番号Vo 請求_クレジットカード番号 = null;
		クレジットカード有効期限Vo 請求_クレジットカード有効期限 = null;

		// 自社口座振込
		金融機関コードVo 自社口座振込_口座_金融機関コード = null;
		金融機関支店コードVo 自社口座振込_口座_金融機関支店コード = null;
		口座種別Code 自社口座振込_口座_口座種別 = null;
		口座番号Vo 自社口座振込_口座_口座番号 = null;
		口座名義Vo 自社口座振込_口座_口座名義 = null;

		Date 送金_適用開始日 = null;
		Date 送金_適用終了日 = null;
		決済方法Code 送金_決済方法 = null;
		決済サービスCode 送金_決済代行サービス = null;
		決済アクセスキーVo 送金_決済アクセスキー = null;

		金融機関コードVo 送金_口座_金融機関コード = null;
		金融機関支店コードVo 送金_口座_金融機関支店コード = null;
		口座種別Code 送金_口座_口座種別 = null;
		口座番号Vo 送金_口座_口座番号 = null;
		口座名義Vo 送金_口座_口座名義 = null;

		契約者を引き継ぐCode 契約者の連絡先を引き継ぐ = null;
		氏名会社名カナVo 氏名会社名カナ = null;
		氏名会社名Vo 氏名会社名 = null;
		部署名等カナVo 部署名等カナ = null;
		部署名等Vo 部署名等 = null;
		敬称Vo 敬称 = null;
		連絡先住所Vo 連絡先住所 = null;
		電話Vo 電話1 = null;
		電話Vo 電話2 = null;
		メールアドレスVo メール1 = null;
		メールアドレスVo メール2 = null;

		利用状況Code 利用状況 = 決済手段dto.利用状況();

		List<@NonNull 請求手段履歴With決済アクセスキー> 請求手段リスト = Optional.ofNullable(決済手段dto.請求手段()).orElseGet(ArrayList::new);

		List<@NonNull  請求手段履歴情報> 請求手段履歴 = new ArrayList<>();

		if (請求手段リスト != null) {
			請求手段履歴 = 請求手段リスト.stream()
					.limit(5)
					.map(請求手段 -> {
						請求手段履歴情報 info = new 請求手段履歴情報();
						info.請求手段履歴 = 請求手段.請求手段履歴();
						info.請求決済代行サービス = 決済サービスCode.GMO_マルビル;
						info.請求履歴決済アクセスキー = 請求手段.決済アクセスキー();
						return info;
					})
					.filter(Objects::nonNull)
					.toList();

			Optional<@NonNull 請求手段履歴With決済アクセスキー> 請求手段履歴With決済アクセスキー = 請求手段リスト.stream().filter(
					請求手段 -> 請求手段.請求手段履歴().適用期間().isInclude(Date.now()))
					.findFirst();
			if (請求手段履歴With決済アクセスキー.isPresent()) {
				請求手段履歴With決済アクセスキー 請求手段 = Objects.requireNonNull(請求手段履歴With決済アクセスキー.get());
				請求_適用開始日 = 請求手段.請求手段履歴().適用期間().from();
				請求_適用終了日 = 請求手段.請求手段履歴().適用期間().to();
				請求_決済方法 = 決済方法Code.valueOf(請求手段.請求手段履歴().請求手段().請求方法().encode());
				請求_決済代行サービス = 決済サービスCode.GMO_マルビル;
				請求_決済アクセスキー = 請求手段.決済アクセスキー();

				if (請求手段.請求手段履歴().請求手段().請求方法() == 請求方法Code.クレジットカード払い) {
					クレジットカードVo クレジットカード = 請求手段.クレジットカード();
					if (クレジットカード != null) {
						請求_クレジットカードブランド = クレジットカード.クレジットカードブランド();
						請求_クレジットカード番号 = クレジットカード.クレジットカード番号();
						請求_クレジットカード有効期限 = クレジットカード.クレジットカード有効期限();
					}
				}
				if (請求手段.請求手段履歴().請求手段().請求方法() == 請求方法Code.口座振替) {
					口座Vo 口座 = 請求手段.口座();
					if (口座 != null) {
						請求_口座_金融機関コード = 口座.金融機関コード();
						請求_口座_金融機関支店コード = 口座.金融機関支店コード();
						請求_口座_口座種別 = 口座.口座種別();
						請求_口座_口座番号 = 口座.口座番号();
						請求_口座_口座名義 = 口座.口座名義();
					}
				}
				if (請求手段.請求手段履歴().請求手段().請求方法() == 請求方法Code.振込用請求書払い) {
					口座Vo 口座 = 請求手段.口座();
					if (口座 != null) {
						自社口座振込_口座_金融機関コード = 口座.金融機関コード();
						自社口座振込_口座_金融機関支店コード = 口座.金融機関支店コード();
						自社口座振込_口座_口座種別 = 口座.口座種別();
						自社口座振込_口座_口座番号 = 口座.口座番号();
						自社口座振込_口座_口座名義 = 口座.口座名義();
					}
				}
			}
		}

		List<@NonNull 送金手段履歴With決済アクセスキー> 送金手段リスト = Optional.ofNullable(決済手段dto.送金手段()).orElseGet(ArrayList::new);

		List<@NonNull 送金手段履歴情報> 送金手段履歴 = new ArrayList<>();
		if (送金手段リスト != null) {
			送金手段履歴 = 送金手段リスト.stream()
					.limit(5)
					.map(送金手段 -> {
						送金手段履歴情報 info = new 送金手段履歴情報();
						info.送金手段履歴 = 送金手段.送金手段履歴();
						info.送金決済代行サービス = 決済サービスCode.GMO_送金サービス;
						info.送金履歴決済アクセスキー = 送金手段.決済アクセスキー();
						return info;
					})
					.filter(Objects::nonNull)
					.toList();

			Optional<@NonNull 送金手段履歴With決済アクセスキー> 送金手段履歴With決済アクセスキー = 送金手段リスト.stream()
					.filter(送金手段 -> 送金手段.送金手段履歴().適用期間().isInclude(Date.now()))
					.findFirst();

			if (送金手段履歴With決済アクセスキー.isPresent()) {
				送金手段履歴With決済アクセスキー 送金手段 = Objects.requireNonNull(送金手段履歴With決済アクセスキー.get());

				送金_適用開始日 = 送金手段.送金手段履歴().適用期間().from();
				送金_適用終了日 = 送金手段.送金手段履歴().適用期間().to();
				送金_決済方法 = 決済方法Code.valueOf(送金手段.送金手段履歴().送金手段().送金方法().encode());
				送金_決済代行サービス = 決済サービスCode.GMO_送金サービス;
				送金_決済アクセスキー = 送金手段.決済アクセスキー();

				if (送金手段.送金手段履歴().送金手段().送金方法() == 送金方法Code.口座送金) {
					口座Vo 口座 = 送金手段.口座();
					if (口座 != null) {
						送金_口座_金融機関コード = 口座.金融機関コード();
						送金_口座_金融機関支店コード = 口座.金融機関支店コード();
						送金_口座_口座種別 = 口座.口座種別();
						送金_口座_口座番号 = 口座.口座番号();
						送金_口座_口座名義 = 口座.口座名義();
					}
				}
			}
		}

		List<@NonNull 送付先履歴情報> 送付先履歴 = new ArrayList<>();
		List<@NonNull 送付先履歴Vo> 送付先履歴リスト = Optional.ofNullable(決済手段dto.送付先()).orElseGet(ArrayList::new);
		if (送付先履歴リスト != null) {
			送付先履歴 = 送付先履歴リスト.stream()
					.limit(5)
					.map(送付先 -> {
						送付先履歴情報 info = new 送付先履歴情報();
						info.送付先履歴 = 送付先;
						return info;
					})
					.filter(Objects::nonNull)
					.toList();
			for (送付先履歴Vo 送付先 : 送付先履歴リスト) {
				if (送付先.適用期間().isInclude(Date.now())) {
					契約者の連絡先を引き継ぐ = 送付先.送付先().契約者の連絡先を引き継ぐ();
					氏名会社名カナ = 送付先.送付先().送付先().宛名().氏名().氏名会社名カナ();
					氏名会社名 = 送付先.送付先().送付先().宛名().氏名().氏名会社名();
					部署名等カナ = 送付先.送付先().送付先().宛名().氏名().部署名等カナ();
					部署名等 = 送付先.送付先().送付先().宛名().氏名().部署名等();
					敬称 = 送付先.送付先().送付先().宛名().敬称();
					連絡先住所 = 送付先.送付先().送付先().連絡先住所();
					電話1 = 送付先.送付先().送付先().電話1();
					電話2 = 送付先.送付先().送付先().電話2();
					メール1 = 送付先.送付先().送付先().メール1();
					メール2 = 送付先.送付先().送付先().メール2();
				}
			}
		}

		return new 決済手段照会ViewModel(
				決済手段番号,
				決済手段名,
				請求_適用開始日,
				請求_適用終了日,
				請求_決済方法,
				請求_決済代行サービス,
				請求_決済アクセスキー,
				請求_口座_金融機関コード,
				請求_口座_金融機関支店コード,
				請求_口座_口座種別,
				請求_口座_口座番号,
				請求_口座_口座名義,
				請求_クレジットカードブランド,
				請求_クレジットカード番号,
				請求_クレジットカード有効期限,
				自社口座振込_口座_金融機関コード,
				自社口座振込_口座_金融機関支店コード,
				自社口座振込_口座_口座種別,
				自社口座振込_口座_口座番号,
				自社口座振込_口座_口座名義,
				送金_適用開始日,
				送金_適用終了日,
				送金_決済方法,
				送金_決済代行サービス,
				送金_決済アクセスキー,
				送金_口座_金融機関コード,
				送金_口座_金融機関支店コード,
				送金_口座_口座種別,
				送金_口座_口座番号,
				送金_口座_口座名義,
				契約者の連絡先を引き継ぐ,
				氏名会社名カナ,
				氏名会社名,
				部署名等カナ,
				部署名等,
				敬称,
				連絡先住所,
				電話1,
				電話2,
				メール1,
				メール2,
				利用状況,
				請求手段履歴,
				送金手段履歴,
				送付先履歴);
	}
}
