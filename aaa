@AllArgsConstructor
public class 決済手段照会ViewModelFactory {

    public static 決済手段照会ViewModel createViewModel(決済手段照会Dto dto) {
        決済手段番号Vo 決済手段番号 = dto.決済手段番号();
        決済手段名Vo 決済手段名 = dto.決済手段名();
        利用状況Code 利用状況 = dto.利用状況();

        請求情報 請求 = extract請求情報(dto);
        送金情報 送金 = extract送金情報(dto);
        送付情報 送付 = extract送付情報(dto);

        return new 決済手段照会ViewModel(
                決済手段番号,
                決済手段名,
                請求.適用開始日,
                請求.適用終了日,
                請求.決済方法,
                請求.決済代行サービス,
                請求.決済アクセスキー,
                請求.金融機関コード,
                請求.金融機関支店コード,
                請求.口座種別,
                請求.口座番号,
                請求.口座名義,
                請求.クレジットカードブランド,
                請求.クレジットカード番号,
                請求.クレジットカード有効期限,
                請求.自社口座_金融機関コード,
                請求.自社口座_金融機関支店コード,
                請求.自社口座_口座種別,
                請求.自社口座_口座番号,
                請求.自社口座_口座名義,
                送金.適用開始日,
                送金.適用終了日,
                送金.決済方法,
                送金.決済代行サービス,
                送金.決済アクセスキー,
                送金.口座_金融機関コード,
                送金.口座_金融機関支店コード,
                送金.口座_口座種別,
                送金.口座_口座番号,
                送金.口座_口座名義,
                送付.契約者の連絡先を引き継ぐ,
                送付.氏名会社名カナ,
                送付.氏名会社名,
                送付.部署名等カナ,
                送付.部署名等,
                送付.敬称,
                送付.連絡先住所,
                送付.電話1,
                送付.電話2,
                送付.メール1,
                送付.メール2,
                利用状況,
                請求.履歴,
                送金.履歴,
                送付.履歴
        );
    }

    // region ====== 子方法：請求情報抽出 ======

    private static 請求情報 extract請求情報(決済手段照会Dto dto) {
        請求情報 result = new 請求情報();

        List<@NonNull 請求手段履歴With決済アクセスキー> 請求手段リスト =
                Optional.ofNullable(dto.請求手段()).orElseGet(ArrayList::new);

        result.履歴 = 請求手段リスト.stream()
                .limit(5)
                .map(履歴 -> {
                    請求手段履歴情報 info = new 請求手段履歴情報();
                    info.請求手段履歴 = 履歴.請求手段履歴();
                    info.請求決済代行サービス = 決済サービスCode.GMO_マルビル;
                    info.請求履歴決済アクセスキー = 履歴.決済アクセスキー();
                    return info;
                })
                .toList();

        Optional<請求手段履歴With決済アクセスキー> selected = 請求手段リスト.stream()
                .filter(h -> h.請求手段履歴().適用期間().isInclude(Date.now()))
                .findFirst();

        selected.ifPresent(請求 -> {
            result.適用開始日 = 請求.請求手段履歴().適用期間().from();
            result.適用終了日 = 請求.請求手段履歴().適用期間().to();
            result.決済方法 = 決済方法Code.valueOf(請求.請求手段履歴().請求手段().請求方法().encode());
            result.決済代行サービス = 決済サービスCode.GMO_マルビル;
            result.決済アクセスキー = 請求.決済アクセスキー();

            if (請求.請求手段履歴().請求手段().請求方法() == 請求方法Code.クレジットカード払い) {
                クレジットカードVo カード = 請求.クレジットカード();
                if (カード != null) {
                    result.クレジットカードブランド = カード.クレジットカードブランド();
                    result.クレジットカード番号 = カード.クレジットカード番号();
                    result.クレジットカード有効期限 = カード.クレジットカード有効期限();
                }
            } else if (請求.請求手段履歴().請求手段().請求方法() == 請求方法Code.口座振替) {
                口座Vo 口座 = 請求.口座();
                if (口座 != null) {
                    result.金融機関コード = 口座.金融機関コード();
                    result.金融機関支店コード = 口座.金融機関支店コード();
                    result.口座種別 = 口座.口座種別();
                    result.口座番号 = 口座.口座番号();
                    result.口座名義 = 口座.口座名義();
                }
            } else if (請求.請求手段履歴().請求手段().請求方法() == 請求方法Code.振込用請求書払い) {
                口座Vo 口座 = 請求.口座();
                if (口座 != null) {
                    result.自社口座_金融機関コード = 口座.金融機関コード();
                    result.自社口座_金融機関支店コード = 口座.金融機関支店コード();
                    result.自社口座_口座種別 = 口座.口座種別();
                    result.自社口座_口座番号 = 口座.口座番号();
                    result.自社口座_口座名義 = 口座.口座名義();
                }
            }
        });

        return result;
    }

    // endregion

    // region ====== 子方法：送金情報抽出 ======

    private static 送金情報 extract送金情報(決済手段照会Dto dto) {
        送金情報 result = new 送金情報();

        List<@NonNull 送金手段履歴With決済アクセスキー> list =
                Optional.ofNullable(dto.送金手段()).orElseGet(ArrayList::new);

        result.履歴 = list.stream()
                .limit(5)
                .map(h -> {
                    送金手段履歴情報 info = new 送金手段履歴情報();
                    info.送金手段履歴 = h.送金手段履歴();
                    info.送金決済代行サービス = 決済サービスCode.GMO_送金サービス;
                    info.送金履歴決済アクセスキー = h.決済アクセスキー();
                    return info;
                })
                .toList();

        list.stream()
                .filter(h -> h.送金手段履歴().適用期間().isInclude(Date.now()))
                .findFirst()
                .ifPresent(送金 -> {
                    result.適用開始日 = 送金.送金手段履歴().適用期間().from();
                    result.適用終了日 = 送金.送金手段履歴().適用期間().to();
                    result.決済方法 = 決済方法Code.valueOf(送金.送金手段履歴().送金手段().送金方法().encode());
                    result.決済代行サービス = 決済サービスCode.GMO_送金サービス;
                    result.決済アクセスキー = 送金.決済アクセスキー();

                    if (送金.送金手段履歴().送金手段().送金方法() == 送金方法Code.口座送金) {
                        口座Vo 口座 = 送金.口座();
                        if (口座 != null) {
                            result.口座_金融機関コード = 口座.金融機関コード();
                            result.口座_金融機関支店コード = 口座.金融機関支店コード();
                            result.口座_口座種別 = 口座.口座種別();
                            result.口座_口座番号 = 口座.口座番号();
                            result.口座_口座名義 = 口座.口座名義();
                        }
                    }
                });

        return result;
    }

    // endregion

    // region ====== 子方法：送付先情報抽出 ======

    private static 送付情報 extract送付情報(決済手段照会Dto dto) {
        送付情報 result = new 送付情報();

        List<@NonNull 送付先履歴Vo> list = Optional.ofNullable(dto.送付先()).orElseGet(ArrayList::new);

        result.履歴 = list.stream()
                .limit(5)
                .map(vo -> {
                    送付先履歴情報 info = new 送付先履歴情報();
                    info.送付先履歴 = vo;
                    return info;
                })
                .toList();

        list.stream()
                .filter(v -> v.適用期間().isInclude(Date.now()))
                .findFirst()
                .ifPresent(送付先 -> {
                    result.契約者の連絡先を引き継ぐ = 送付先.送付先().契約者の連絡先を引き継ぐ();
                    result.氏名会社名カナ = 送付先.送付先().送付先().宛名().氏名().氏名会社名カナ();
                    result.氏名会社名 = 送付先.送付先().送付先().宛名().氏名().氏名会社名();
                    result.部署名等カナ = 送付先.送付先().送付先().宛名().氏名().部署名等カナ();
                    result.部署名等 = 送付先.送付先().送付先().宛名().氏名().部署名等();
                    result.敬称 = 送付先.送付先().送付先().宛名().敬称();
                    result.連絡先住所 = 送付先.送付先().送付先().連絡先住所();
                    result.電話1 = 送付先.送付先().送付先().電話1();
                    result.電話2 = 送付先.送付先().送付先().電話2();
                    result.メール1 = 送付先.送付先().送付先().メール1();
                    result.メール2 = 送付先.送付先().送付先().メール2();
                });

        return result;
    }

    // endregion

    // region ====== 封装类定义 ======

    public static class 請求情報 {
        Date 適用開始日, 適用終了日;
        決済方法Code 決済方法;
        決済サービスCode 決済代行サービス;
        決済アクセスキーVo 決済アクセスキー;
        クレジットカードブランドCode クレジットカードブランド;
        クレジットカード番号Vo クレジットカード番号;
        クレジットカード有効期限Vo クレジットカード有効期限;
        金融機関コードVo 金融機関コード, 自社口座_金融機関コード;
        金融機関支店コードVo 金融機関支店コード, 自社口座_金融機関支店コード;
        口座種別Code 口座種別, 自社口座_口座種別;
        口座番号Vo 口座番号, 自社口座_口座番号;
        口座名義Vo 口座名義, 自社口座_口座名義;
        List<請求手段履歴情報> 履歴;
    }

    public static class 送金情報 {
        Date 適用開始日, 適用終了日;
        決済方法Code 決済方法;
        決済サービスCode 決済代行サービス;
        決済アクセスキーVo 決済アクセスキー;
        金融機関コードVo 口座_金融機関コード;
        金融機関支店コードVo 口座_金融機関支店コード;
        口座種別Code 口座_口座種別;
        口座番号Vo 口座_口座番号;
        口座名義Vo 口座_口座名義;
        List<送金手段履歴情報> 履歴;
    }

    public static class 送付情報 {
        契約者を引き継ぐCode 契約者の連絡先を引き継ぐ;
        氏名会社名カナVo 氏名会社名カナ;
        氏名会社名Vo 氏名会社名;
        部署名等カナVo 部署名等カナ;
        部署名等Vo 部署名等;
        敬称Vo 敬称;
        連絡先住所Vo 連絡先住所;
        電話Vo 電話1, 電話2;
        メールアドレスVo メール1, メール2;
        List<送付先履歴情報> 履歴;
    }

    // endregion
}
